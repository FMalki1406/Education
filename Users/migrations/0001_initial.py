# Generated by Django 2.2.3 on 2019-11-18 06:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Force',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('force_name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Force',
                'verbose_name_plural': 'Forces',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Ministry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ministry_name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Ministry',
                'verbose_name_plural': 'Ministries',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='RankType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank_type', models.CharField(max_length=15)),
            ],
            options={
                'verbose_name': 'Rank Type',
                'verbose_name_plural': 'Ranks Type',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.PositiveIntegerField(choices=[(1, 'موظف'), (2, 'أستاذ'), (3, 'طالب'), (4, 'Admin')], default=3)),
                ('temp_pass', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank_name', models.CharField(max_length=30)),
                ('rank_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.RankType')),
            ],
            options={
                'verbose_name': 'Rank',
                'verbose_name_plural': 'Ranks',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('second_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('marital_status', models.PositiveSmallIntegerField(choices=[(1, 'أعزب'), (2, 'متزوج')])),
                ('military_id', models.PositiveIntegerField()),
                ('date_of_birth', models.DateField()),
                ('national_id', models.PositiveIntegerField(blank=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('force_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='Users.Force')),
                ('ministry_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='Users.Ministry')),
                ('rank_name', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Users.Rank')),
                ('rank_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Users.RankType')),
                ('username', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='JobHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_history', models.CharField(max_length=100)),
                ('profile_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.Profile')),
            ],
            options={
                'verbose_name': 'Job History',
                'verbose_name_plural': 'Jobs History',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='CourseHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_history', models.CharField(max_length=100)),
                ('profile_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.Profile')),
            ],
            options={
                'verbose_name': 'Course History',
                'verbose_name_plural': 'Courses History',
                'ordering': ['-id'],
            },
        ),
    ]
